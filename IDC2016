#include <SoftwareSerial.h>
#include <Servo.h>
#define Rx 10 // DOUT to pin 10
#define Tx 11 // DIN to pin 11

SoftwareSerial Xbee (Rx, Tx);
const int buttonPin = 2;
const int ledPin = 3;
const int middleSensor = 4;
const int rightSensor = 5;
const int leftSensor = 6;
const int rightServoSensor = 12;
const int leftServoSensor = 13;
const int THRESHOLD = 50; // To update
int buttonState = 0;
Servo servoRight;
Servo servoLeft;

void setup() {
  Serial.begin(9600);
  Xbee.begin(9600);
  setupCommunication();
  setupServos();
}

void setupCommunication(){
  pinMode(buttonPin, INPUT);
  pinMode(ledPin, OUTPUT);
}

void setupServos(){
  servoRight.attach(rightServoSensor);
  servoLeft.attach(leftServoSensor);
}

void loop(){
  boolean lastBack = false;
  while(true){
    lineFollow(lastBack);
  }
}

boolean lineFollow(boolean lastBack){
  long leftRc = rcTime(leftSensor);
  long middleRc = rcTime(middleSensor);
  long rightRc = rcTime(rightSensor);
  if(!leftRc && !middleRc && !rightRc){
    if(lastBack){
      goForward();
      return false;
    }
    else{
      goBackward();
      return true;
    }
  }
  else if(leftRc && middleRc && rightRc){
    stop();
    delay(1000);
    goForward();
  }
  else if(leftRc && rightRc){
    goForward();
  }
  else if(middleRc && rightRc){
    turnFastRight();
  }
  else if(leftRc && middleRc){
    turnFastLeft();
  }
  else if(middleRc){
    goForward();
  }
  else if(leftRc){
    turnLeft();
  }
  else if(rightRc){
    turnRight();
  }
  return false;
}

//ColorPAL
void readColorPal(){
  // TODO
}

void stop(){
  pauseLeft();
  pauseRight();
}

void goForward(){
  turnRightCW();
  turnLeftCCW();
}

void goBackward(){
  turnRightCCW();
  turnLeftCW();
}

void turnRight(){
  turnLeftCCW();
  pauseRight();
}

void turnLeft(){
  turnRightCW();
  pauseLeft();
}

void turnRightCW(){
  servoRight.writeMicroseconds(1450);
}

void turnRightCCW(){
  servoRight.writeMicroseconds(1550);
}

void turnLeftCW(){
  servoLeft.writeMicroseconds(1450);
}

void turnLeftCCW(){
  servoLeft.writeMicroseconds(1550);
}

void pauseLeft(){
  servoLeft.writeMicroseconds(1500);
}

void pauseRight(){
  servoRight.writeMicroseconds(1500);
}

void turnFastLeft(){
  turnRightCW();
  turnLeftCCW();
}

void turnFastRight(){
  turnLeftCCW();
  turnRightCCW();
}

// Darker -> smaller rcTime
boolean rcTime(int sensPin){
  long result = 0;
  pinMode(sensPin, OUTPUT);
  digitalWrite(sensPin, HIGH); // high to QTI sensor
  delay(100); // delays for 1 ms
  pinMode(sensPin, INPUT); // sets to input in order to read the decay
  digitalWrite(sensPin, LOW);
  while(digitalRead(sensPin)){ // checks length of decay
    result++;
  }
  return result > THRESHOLD;
}

void checkButtonPress(){
  buttonState = digitalRead(buttonPin);
  if(buttonState == HIGH){
    char myChar = 'a';
    Xbee.print(myChar);
  }
}

void checkSerial(){
  if(Serial.available()){
    char outgoing = Serial.read();
    Xbee.print(outgoing);
  }
}

void checkXbee(){
  if(Xbee.available()){
    char incoming = Xbee.read();
    ledSecond();
  }
}

void ledOn(){
  digitalWrite(ledPin, HIGH);
}

void ledOff(){
  digitalWrite(ledPin, LOW);
}

void ledSecond(){
  ledOn();
  delay(1000);
  ledOff();
}